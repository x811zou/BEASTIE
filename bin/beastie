#!/usr/bin/env python3

import BEASTIE
from BEASTIE import cleanVCF, extractHets, pileupREADS, simulateREADS, filterGenotypingError
import logging
import sys

def beastie_cleanVCF(args):
    vcfgz = args.vcfgz_file
    bi_vcfgz = args.filtered_bi_vcfgz
    bihets_vcfgz = args.filtered_bihets_vcfgz
    tmp_path = args.tmp_dir
    quality_score_cutoff = args.quality_score_min
    skip_require_pass = args.skip_require_pass
    logging.basicConfig(
        format="%(asctime)-15s [%(levelname)s] %(message)s",
        level=logging.DEBUG,
    )
    cleanVCF.cleaning(
        tmp_path,
        vcfgz,
        bi_vcfgz,
        bihets_vcfgz,
        quality_score_cutoff,
        not skip_require_pass,
    )

def configure_cleanVCF_parser(parser):
    parser.set_defaults(func=beastie_cleanVCF)
    parser.add_argument(
        "--vcfgz-file",
        help="Full path to VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--filtered-bi-vcfgz",
        help="Full path to filtered bi VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--filtered-bihets-vcfgz",
        help="Full path to filtered bihets VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--tmp-dir",
        help="full path of tmp dir",
        required=True,
    )
    parser.add_argument(
        "--skip-require-pass",
        help="not require PASS filtering on quality score in VCF fields[7]",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        "--quality-score-min",
        help="quality score cutoff in VCF fields[6]. 0 means we are using PASS filtering",
        default=10,
        type=int,
    )


def beastie_extractHets(args):
    filename = args.out_hetSNP
    vcfgz_path_filename = args.vcfgz_file
    chr_start = args.chr_start
    chr_end = args.chr_end
    annotation = args.gencode_gz
    skip_require_pass = args.skip_require_pass
    debug_gene = args.debug_gene
    logging.basicConfig(
        format="%(asctime)-15s [%(levelname)s] %(message)s",
        level=logging.DEBUG,
    )
    extractHets.count_all_het_sites(
        vcfgz_path_filename,
        filename,
        chr_start,
        chr_end,
        annotation,
        not skip_require_pass,
        debug_gene,
    )

def configure_extractHets_parser(parser):
    parser.set_defaults(func=beastie_extractHets)
    parser.add_argument(
        "--vcfgz-file",
        help="Path to VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--out-hetSNP",
        help="full path of hetSNP file",
        required=True,
    )
    parser.add_argument(
        "--gencode-gz",
        help="Path to gene body reference gz file",
        required=True,
    )
    parser.add_argument(
        "--chr-start", help="Starting chromosome number", type=int, required=True,
    )
    parser.add_argument(
        "--chr-end", help="Ending chromosome number", type=int, required=True,
    )
    parser.add_argument(
        "--skip-require-pass",
        help="not require PASS filtering on quality score in VCF fields[6]",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        "--debug-gene",
        help="one specific geneID, for debugging purpose only",
        default=None,
    )


def configure_extractHetsATACseq_parser(parser):
    parser.set_defaults(func=beastie_extractHetsATACseq)
    parser.add_argument(
        "--vcfgz-file",
        help="Path to VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--out-hetSNP",
        help="full path of hetSNP file",
        required=True,
    )
    parser.add_argument(
        "--annotationFile",
        help="Full path of annotation file",
        required=True,
    )


def beastie_extractHetsATACseq(args):
    filename = args.out_hetSNP
    vcfgz_path_filename = args.vcfgz_file
    annotation = args.annotationFile
    logging.basicConfig(
        format="%(asctime)-15s [%(levelname)s] %(message)s",
        level=logging.DEBUG,
    )
    extractHets.count_all_het_sites_forpeaks(vcfgz_path_filename, filename, annotation)


def beastie_pileupReads(args):
    tmp_path = args.tmp_dir
    hetSNP = args.in_hetSNP
    bamgz = args.in_BAMGZ
    reference = args.ref_file
    chr_start = args.chr_start
    chr_end = args.chr_end
    pileupGZ = args.out_pileupGZ
    logging.basicConfig(
        format="%(asctime)-15s [%(levelname)s] %(message)s",
        level=logging.DEBUG,
    )
    pileupREADS.mpileup(
        tmp_path,
        hetSNP,
        bamgz,
        pileupGZ,
        reference,
        chr_start,
        chr_end,
    )

def configure_pileupReads_parser(parser):
    parser.set_defaults(func=beastie_pileupReads)
    parser.add_argument(
        "--in-hetSNP",
        help="Full path to input hetSNP file",
        required=True,
    )
    parser.add_argument(
        "--in-BAMGZ",
        help="Full path to input BAMGZ file",
        required=True,
    )
    parser.add_argument(
        "--out-pileupGZ",
        help="Full path to output pileup GZ file",
        required=True,
    )
    parser.add_argument(
        "--ref-file",
        help="Full path to hg19.fa file",
        required=True,
    )
    parser.add_argument(
        "--chr-start", help="Starting chromosome number", default=1, type=int
    )
    parser.add_argument(
        "--chr-end", help="Ending chromosome number", default=22, type=int
    )
    parser.add_argument(
        "--tmp-dir",
        help="full path of tmp dir",
        required=True,
    )


def beastie_simulateReads(args):
    vcfgz = args.vcfgz_file
    bamgz = args.in_BAMGZ
    out_fwd_fastqReads = args.out_fwd_fastq
    out_rev_fastqReads = args.out_rev_fastq
    tmp_path = args.tmp_dir
    genome2bit = args.ref_genome_2bit
    gff = args.ref_gff
    twobit = args.ref_twobit_dir
    chr_start = args.chr_start
    chr_end = args.chr_end
    logging.basicConfig(
        format="%(asctime)-15s [%(levelname)s] %(message)s",
        level=logging.DEBUG,
    )
    simulateREADS.run_simulation(
        chr_start,
        chr_end,
        out_fwd_fastqReads,
        out_rev_fastqReads,
        tmp_path,
        twobit,
        genome2bit,
        gff,
        bamgz,
        vcfgz,
    )

def configure_simulateReads_parser(parser):
    parser.set_defaults(func=beastie_simulateReads)
    parser.add_argument(
        "--vcfgz-file",
        help="Full path to filtered bi-allelic SNPs VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--in-BAMGZ",
        help="Full path to input BAMGZ file",
        required=True,
    )
    parser.add_argument(
        "--out-fwd-fastq",
        help="Full path to output forward fastq file",
        required=True,
    )
    parser.add_argument(
        "--out-rev-fastq",
        help="Full path to output reverse fastq file",
        required=True,
    )
    parser.add_argument(
        "--ref-genome-2bit",
        help="Full path to 2bit reference genome file",
        required=True,
    )
    parser.add_argument(
        "--ref-twobit-dir",
        help="Full path to 2bit reference directory (link: http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/). Should contain faToTwoBit and twoBitToFa",
        required=True,
    )
    parser.add_argument(
        "--ref-gff",
        help="Full path to gff file",
        required=True,
    )
    parser.add_argument(
        "--chr-start", help="Starting chromosome number", default=1, type=int
    )
    parser.add_argument(
        "--chr-end", help="Ending chromosome number", default=22, type=int
    )
    parser.add_argument(
        "--tmp-dir",
        help="full path of tmp dir",
        required=True,
    )

def beastie_filterGenotypingError(args):
    vcfgz = args.vcfgz_file
    output_path = args.out_dir
    chr_start = args.chr_start
    chr_end = args.chr_end
    af_path = args.af_dir
    pileup = args.pileupGZ_file
    ancestry = args.ancestry
    read_length = args.read_length
    het_snp_file = args.input_hetSNP_file
    min_single_count = args.min_single_cov
    min_total_count = args.min_total_cov
    genotypeEr_file = args.genotype_error_file
    genotypeEr_cutoff = args.genotypeEr_cutoff
    filtered_het_snp_file = args.filtered_hetSNP_file
    n_warmup = args.warmup
    n_keeper = args.keeper
    RE_ITERATE = args.iterate
    pcutoff_low = args.pcutoff_low
    pcutoff_high = args.pcutoff_high

    if args.atacseq is True:
        ancestry = None
        genotypeEr_file = None
        atacseq = True
    else:
        atacseq = False

    logging.basicConfig(
        format="%(asctime)-15s [%(levelname)s] %(message)s",
        level=logging.DEBUG,
    )
    filterGenotypingError.run(
        output_path,
        af_path,
        vcfgz,
        ancestry,
        chr_start,
        chr_end,
        read_length,
        min_single_count,
        min_total_count,
        het_snp_file,
        genotypeEr_file,
        pileup,
        genotypeEr_cutoff,
        filtered_het_snp_file,
        n_warmup,
        n_keeper,
        RE_ITERATE,
        pcutoff_low,
        pcutoff_high,
        atacseq,
    )


def configure_filterGenotypingError_parser(parser):
    parser.set_defaults(func=beastie_filterGenotypingError)

    parser.add_argument(
        "--vcfgz-file",
        help="Path to VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--pileupGZ-file",
        help="Path to pileup GZ file.",
        required=True,
    )
    parser.add_argument(
        "--input-hetSNP-file",
        help="Path to pre-generated het snps file.",
        required=True,
    )
    parser.add_argument(
        "--filtered-hetSNP-file",
        help="Path to filtered het snps file.",
        required=True,
    )
    parser.add_argument(
        "--af-dir",
        help="Path to AF reference directory.  Should contain files AF_chr{1..22}.csv.gz",
    )
    parser.add_argument(
        "--ancestry",
        help="Ancestry abbreviation (ex EUR, CEU, TSI, FIN, AFR, YRI, LWK, ...).",
        default=None,
    )
    parser.add_argument(
        "--min-total-cov",
        help="Minimum coverage requirement for total read counts on one site.",
        default=1,
        type=int,
    )
    parser.add_argument(
        "--min-single-cov",
        help="Minimum coverage requirement for each REF/ALT allele.",
        default=0,
        type=int,
    )
    parser.add_argument(
        "--genotypeEr-cutoff",
        help="Fish exact test p-val cutoff.",
        default=0.05,
        type=float,
    )
    parser.add_argument(
        "--chr-start", help="Starting chromosome number", default=1, type=int
    )
    parser.add_argument(
        "--chr-end", help="Ending chromosome number", default=22, type=int
    )
    parser.add_argument(
        "--include-x-chromosome",
        help="Also process the X chromosome",
        action="store_true",
    )
    parser.add_argument(
        "--read-length",
        help="Average length of reads for input fastq data.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--out-dir",
        help="Path to directory where beastie output will be placed.",
        required=True,
    )
    parser.add_argument(
        "--genotype-error-file",
        help="full path to genotyping Error filtered hetSNP file",
    )
    parser.add_argument(
        "--warmup",
        help="number of burn in MCMC estimates in JAGS model",
        default=1000,
        type=int,
    )
    parser.add_argument(
        "--keeper",
        help="number of MCMC estimates keeped in JAGS model",
        default=1000,
        type=int,
    )
    parser.add_argument(
        "--pcutoff-low",
        help="lower bound of genotyping error test pval",
        default=0.02,
        type=float,
    )
    parser.add_argument(
        "--pcutoff-high",
        help="higher bound of genotyping error test pval",
        default=0.08,
        type=float,
    )
    parser.add_argument(
        "--iterate",
        help="iterate samples with p values within 0.2-0.8 with the number MCMC estimates as the number calculated with 95%CI within 1%",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        "--atacseq",
        help="(1) this option indicates no phasing info will be used, (2) no, (3) if shapeit2 is provided will use providied phasing",
        default=False,
        type=bool,
    )


def beastie_runModel(args):
    config = BEASTIE.load_config_from_args(args)
    BEASTIE.run(config)


def configure_runModel():
    import argparse

    top_level_parser = argparse.ArgumentParser(
        "beastie",
        description="Bayesian Estimation of Allele Specific Transcription Integrating across Exons",
    )
    subparsers = top_level_parser.add_subparsers()
    parser = subparsers.add_parser("runModel", help="Run BEASTIE stan model")
    parser.set_defaults(func=beastie_runModel)

    parser.add_argument(
        "--vcfgz-file",
        help="Full path of the filtered VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--vcf-sample-name",
        help="Name of the sample in the VCF file",
        required=True,
    )
    parser.add_argument(
        "--collected-alignmentBias-file",
        help="Full path of the file with alignment Bias SNPs that you want to filter out",
    )
    parser.add_argument(
        "--simulation-pileup-file",
        help="Full path of the simulation pileup file.",
    )
    parser.add_argument(
        "--filtered-hetSNP-file",
        help="Full path of the filtered het snps file.",
    )
    parser.add_argument(
        "--shapeit2-phasing-file",
        help="Full path of the shapeit2 generated phasing data.",
    )
    parser.add_argument(
        "--ancestry",
        help="Ancestry abbreviation (ex EUR, CEU, TSI, FIN, AFR, YRI, LWK, ...).",
        default=None,
    )
    parser.add_argument(
        "--min-total-cov",
        help="Minimum coverage requirement for total read counts on one site.",
        default=1,
        type=int,
    )
    parser.add_argument(
        "--min-single-cov",
        help="Minimum coverage requirement for each REF/ALT allele.",
        default=0,
        type=int,
    )
    parser.add_argument(
        "--read-length",
        help="Average length of reads for input fastq data.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--alignBiasP-cutoff",
        help="alignment bias Binomial test p-value cutoff.",
        default=0.05,
        type=float,
    )
    parser.add_argument(
        "--ase-cutoff",
        help="alpha value (ASE value cutoff)",
        default=0.05,
        type=float,
    )
    parser.add_argument(
        "--chr-start", help="Starting chromosome number", default=1, type=int
    )
    parser.add_argument(
        "--chr-end", help="Ending chromosome number", default=22, type=int
    )
    parser.add_argument(
        "--nophasing",
        help="(1) this option indicates no phasing info will be used, (2) default is VCF phasing, (3) if shapeit2 is provided will use providied phasing",
        default=False,
        type=bool,
    )
    parser.add_argument(
        "--atacseq",
        help="(1) this option indicates no phasing info will be used, (2) no, (3) if shapeit2 is provided will use providied phasing",
        default=False,
        type=bool,
    )

    parser.add_argument(
        "--save-intermediate", help="Keep intermediate files.", action="store_true"
    )
    parser.add_argument(
        "--output-dir",
        help="Path to directory where output will be placed.",
        required=True,
    )
    parser.add_argument(
        "--ld-token",
        help="LDlink API Token.  Register at https://ldlink.nci.nih.gov/?tab=apiaccess",
    )
    parser.add_argument(
        "--ldlink-cache-dir",
        help="Path to directory to save ldlink cache database.",
        default="~/.beastie",
    )
    parser.add_argument(
        "--ldlink-token-db",
        help="Path to database containing ldlink tokens for running parallel jobs.",
    )
    cleanVCF_parser = subparsers.add_parser(
        "cleanVCF",
        help="clean VCF file for bi-allelic SNPs and heterozygous SNPs",
    )
    configure_cleanVCF_parser(cleanVCF_parser)
    extractHets_parser = subparsers.add_parser(
        "extractHets",
        help="extract heterozygous bi-allelic SNPs for specific chromosomes from gencode annotation for RNAseq",
    )
    configure_extractHets_parser(extractHets_parser)

    extractHetsATACseq_parser = subparsers.add_parser(
        "extractHetsATACseq",
        help="extract heterozygous bi-allelic SNPs from personal peak annotation File for ATACseq",
    )
    configure_extractHetsATACseq_parser(extractHetsATACseq_parser)

    pileupReads_parser = subparsers.add_parser(
        "pileupReads",
        help="pile up reads from aligned BAMGZ for bi-allelic SNPs and heterozygous SNPs",
    )
    configure_pileupReads_parser(pileupReads_parser)

    simulateReads_parser = subparsers.add_parser(
        "simulateReads",
        help="simulate reads from aligned BAMGZ for bi-allelic SNPs and heterozygous SNPs",
    )
    configure_simulateReads_parser(simulateReads_parser)

    filterGenotypingError_parser = subparsers.add_parser(
        "filterGenotypingError",
        help="filter genotyping error",
    )
    configure_filterGenotypingError_parser(filterGenotypingError_parser)

    return top_level_parser


if __name__ == "__main__":
    parser = configure_runModel()
    args = parser.parse_args()

    if not "func" in args or not args.func:
        parser.print_help()
    else:
        args.func(args)

    # config = BEASTIE.load_config_from_args(args)
    # BEASTIE.run(config)
