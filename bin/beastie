#!/usr/bin/env python3

import BEASTIE
from BEASTIE import extractHets, filterGenotypingError
import logging
import sys


def beastie_filterGenotypingError(args):
    prefix = args.prefix if args.prefix is not None else args.vcf_sample_name
    vcfgz = args.vcfgz_file
    vcf_sample_name = args.vcf_sample_name
    output_path = args.beastie_outdir
    chr_start = args.chr_start
    chr_end = args.chr_end
    af_path = args.af_dir
    pileup = args.pileup_file
    ancestry = args.ancestry
    read_length = args.read_length
    het_snp_file = args.input_het_snp_file
    min_single_count = args.min_single_cov
    min_total_count = args.min_total_cov
    genotypeEr_file = args.outfile
    genotypeEr_cutoff = args.genotypeEr_cutoff
    filtered_het_snp_file = args.filtered_het_snp_file
    foldername = args.foldername
    n_warmup = args.warmup
    n_keeper = args.keeper
    RE_ITERATE = args.iterate
    pcutoff_low = args.pcutoff_low
    pcutoff_high = args.pcutoff_high

    logging.basicConfig(
        format="%(asctime)-15s [%(levelname)s] %(message)s",
        level=logging.DEBUG,
    )
    filterGenotypingError.run(
        prefix,
        vcf_sample_name,
        output_path,
        af_path,
        vcfgz,
        ancestry,
        chr_start,
        chr_end,
        read_length,
        min_single_count,
        min_total_count,
        het_snp_file,
        genotypeEr_file,
        pileup,
        genotypeEr_cutoff,
        filtered_het_snp_file,
        foldername,
        n_warmup,
        n_keeper,
        RE_ITERATE,
        pcutoff_low,
        pcutoff_high,
    )


def configure_filterGenotypingError_parser(parser):
    parser.set_defaults(func=beastie_filterGenotypingError)

    parser.add_argument(
        "--prefix",
        help="Prefix for output files, default is --vcf-sample-name value.",
    )
    parser.add_argument(
        "--vcfgz-file",
        help="Path to VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--vcf-sample-name",
        help="Name of sample in VCF file (ex HG00096).",
        required=True,
    )
    parser.add_argument(
        "--pileup-file",
        help="Path to pileup file.",
        required=True,
    )
    parser.add_argument(
        "--input-het-snp-file",
        help="Path to pre-generated het snps file.",
    )
    parser.add_argument(
        "--filtered-het-snp-file",
        help="Path to filtered het snps file.",
    )
    parser.add_argument(
        "--af-dir",
        help="Path to AF reference directory.  Should contain files AF_chr{1..22}.csv.gz",
        required=True,
    )
    parser.add_argument(
        "--ancestry",
        help="Ancestry abbreviation (ex EUR, CEU, TSI, FIN, AFR, YRI, LWK, ...).",
        required=True,
    )
    parser.add_argument(
        "--min-total-cov",
        help="Minimum coverage requirement for total read counts on one site.",
        default=1,
        type=int,
    )
    parser.add_argument(
        "--min-single-cov",
        help="Minimum coverage requirement for each REF/ALT allele.",
        default=0,
        type=int,
    )
    parser.add_argument(
        "--genotypeEr-cutoff",
        help="Fish exact test p-val cutoff.",
        default=0.05,
        type=float,
    )
    parser.add_argument(
        "--chr-start", help="Starting chromosome number", default=1, type=int
    )
    parser.add_argument(
        "--chr-end", help="Ending chromosome number", default=22, type=int
    )
    parser.add_argument(
        "--include-x-chromosome",
        help="Also process the X chromosome",
        action="store_true",
    )
    parser.add_argument(
        "--read-length",
        help="Average length of reads for input fastq data.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--beastie-outdir",
        help="Path to directory where beastie output will be placed.",
        required=True,
    )
    parser.add_argument(
        "--outfile",
        help="full path to genotyping Error filtered hetSNP file",
        required=True,
    )
    parser.add_argument(
        "--foldername",
        default="filterGenotypingError",
    )
    parser.add_argument(
        "--warmup",
        help="number of burn in MCMC estimates in JAGS model",
        default=1000,
        type=int,
    )
    parser.add_argument(
        "--keeper",
        help="number of MCMC estimates keeped in JAGS model",
        default=1000,
        type=int,
    )
    parser.add_argument(
        "--pcutoff-low",
        help="lower bound of genotyping error test pval",
        default=0.02,
        type=float,
    )
    parser.add_argument(
        "--pcutoff-high",
        help="higher bound of genotyping error test pval",
        default=0.08,
        type=float,
    )
    parser.add_argument(
        "--iterate",
        help="iterate samples with p values within 0.2-0.8 with the number MCMC estimates as the number calculated with 95%CI within 1%",
        default=False,
        action="store_true",
    )


def configure_extractHets_parser(parser):
    parser.set_defaults(func=beastie_extractHets)
    parser.add_argument(
        "--vcfgz-file",
        help="Path to VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--vcf-sample-name",
        help="Name of sample in VCF file (ex HG00096).",
        required=True,
    )
    parser.add_argument(
        "--output",
        help="full path of hetSNP file",
        required=True,
    )
    parser.add_argument(
        "--gencode-dir",
        help="Path to gencode reference directory.  Should contain files gencode.chr{1..22}.gtf.gz",
        required=True,
    )
    parser.add_argument(
        "--chr-start", help="Starting chromosome number", default=1, type=int
    )
    parser.add_argument(
        "--chr-end", help="Ending chromosome number", default=22, type=int
    )
    parser.add_argument(
        "--debug-gene",
        help="one specific geneID, for debugging purpose only",
        default=None,
    )


def beastie_extractHets(args):
    filename = args.output
    vcfgz_path_filename = args.vcfgz_file
    chr_start = args.chr_start
    chr_end = args.chr_end
    annotation = args.gencode_dir
    debug_gene = args.debug_gene
    logging.basicConfig(
        format="%(asctime)-15s [%(levelname)s] %(message)s",
        level=logging.DEBUG,
    )
    extractHets.count_all_het_sites(
        vcfgz_path_filename,
        filename,
        chr_start,
        chr_end,
        annotation,
        debug_gene,
    )


def configure_extractHetsATACseq_parser(parser):
    parser.set_defaults(func=beastie_extractHetsATACseq)
    parser.add_argument(
        "--vcfgz-file",
        help="Path to VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--output",
        help="full path of hetSNP file",
        required=True,
    )
    parser.add_argument(
        "--annotationFile",
        help="Full path of annotation file",
        required=True,
    )


def beastie_extractHetsATACseq(args):
    filename = args.output
    vcfgz_path_filename = args.vcfgz_file
    annotation = args.annotationFile
    logging.basicConfig(
        format="%(asctime)-15s [%(levelname)s] %(message)s",
        level=logging.DEBUG,
    )
    extractHets.count_all_het_sites_forpeaks(
        vcfgz_path_filename,
        filename,
        annotation,
    )


def beastie_runModel(args):
    config = BEASTIE.load_config_from_args(args)
    BEASTIE.run(config)


def configure_runModel():
    import argparse

    top_level_parser = argparse.ArgumentParser(
        "beastie",
        description="Bayesian Estimation of Allele Specific Transcription Integrating across Exons",
    )
    subparsers = top_level_parser.add_subparsers()
    parser = subparsers.add_parser("runModel", help="Run BEASTIE stan model")
    parser.set_defaults(func=beastie_runModel)

    parser.add_argument(
        "--prefix",
        help="Prefix for output files, default is --vcf-sample-name value.",
    )
    parser.add_argument(
        "--vcfgz-file",
        help="Full path of the filtered VCFGZ file",
        required=True,
    )
    parser.add_argument(
        "--vcf-sample-name",
        help="Name of sample in VCF file (ex HG00096).",
        required=True,
    )
    parser.add_argument(
        "--collected-alignmentBias-file",
        help="Full path of the file with alignment Bias SNPs that you want to filter out",
    )
    parser.add_argument(
        "--simulation-pileup-file",
        help="Full path of the simulation pileup file.",
    )
    parser.add_argument(
        "--filtered-het-snp-file",
        help="Full path of the filtered het snps file.",
    )
    parser.add_argument(
        "--shapeit2-phasing-file",
        help="Full path of the shapeit2 generated phasing data.",
    )
    parser.add_argument(
        "--ancestry",
        help="Ancestry abbreviation (ex EUR, CEU, TSI, FIN, AFR, YRI, LWK, ...).",
        required=True,
    )
    parser.add_argument(
        "--min-total-cov",
        help="Minimum coverage requirement for total read counts on one site.",
        default=1,
        type=int,
    )
    parser.add_argument(
        "--min-single-cov",
        help="Minimum coverage requirement for each REF/ALT allele.",
        default=0,
        type=int,
    )
    parser.add_argument(
        "--read-length",
        help="Average length of reads for input fastq data.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--sigma",
        help="Dispersion parameter for BEASTIE STAN model.",
        default=0.5,
        type=float,
    )
    parser.add_argument(
        "--alignBiasP-cutoff",
        help="alignment bias Binomial test p-value cutoff.",
        default=0.05,
        type=float,
    )
    parser.add_argument(
        "--ase-cutoff",
        help="ASE value cutoff.",
        default=0.5,
        type=float,
    )
    parser.add_argument(
        "--alpha",
        help="Type-1 error rate for lambda prediction model.",
        default=0.05,
        type=float,
    )
    parser.add_argument(
        "--chr-start", help="Starting chromosome number", default=1, type=int
    )
    parser.add_argument(
        "--chr-end", help="Ending chromosome number", default=22, type=int
    )
    parser.add_argument(
        "--model",
        help="stan model name (iBEASTIE2,iBEASTIE2-improper,BEASTIE3-fix-uniform)",
        default="iBEASTIE2",
    )
    parser.add_argument(
        "--nophasing",
        help="(1) this option indicates no phasing info will be used, (2) default is VCF phasing, (3) if shapei2 is provided will use providied phasing",
    )
    parser.add_argument("--STAN", help="Path to STAN model.", default="/usr/local/bin/")

    parser.add_argument(
        "--save-intermediate", help="Keep intermediate files.", action="store_true"
    )
    parser.add_argument(
        "--warmup",
        help="Number of warmup estimates to burn in STAN model.",
        default=1000,
        type=int,
    ),
    parser.add_argument(
        "--keeper",
        help="Number of estimates to keep from STAN model.",
        default=1000,
        type=int,
    )
    parser.add_argument(
        "--output-dir",
        help="Path to directory where output will be placed.",
        required=True,
    )
    parser.add_argument(
        "--ld-token",
        help="LDlink API Token.  Register at https://ldlink.nci.nih.gov/?tab=apiaccess",
    )
    parser.add_argument(
        "--ldlink-cache-dir",
        help="Path to directory to save ldlink cache database.",
        default="~/.beastie",
    )
    parser.add_argument(
        "--ldlink-token-db",
        help="Path to database containing ldlink tokens for running parallel jobs.",
    )

    extractHets_parser = subparsers.add_parser(
        "extractHets",
        help="extract heterozygous bi-allelic SNPs for specific chromosomes from gencode annotation for RNAseq",
    )
    configure_extractHets_parser(extractHets_parser)

    extractHetsATACseq_parser = subparsers.add_parser(
        "extractHetsATACseq",
        help="extract heterozygous bi-allelic SNPs from personal peak annotation File for ATACseq",
    )
    configure_extractHetsATACseq_parser(extractHetsATACseq_parser)

    filterGenotypingError_parser = subparsers.add_parser(
        "filterGenotypingError",
        help="filter genotyping error",
    )
    configure_filterGenotypingError_parser(filterGenotypingError_parser)

    return top_level_parser


if __name__ == "__main__":
    parser = configure_runModel()
    args = parser.parse_args()

    if not "func" in args or not args.func:
        parser.print_help()
    else:
        args.func(args)

    # config = BEASTIE.load_config_from_args(args)
    # BEASTIE.run(config)
