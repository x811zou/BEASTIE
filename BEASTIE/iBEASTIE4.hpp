
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace iBEASTIE4_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 56> locations_array__ = 
{" (found before start of program)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 49, column 3 to column 23)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 50, column 3 to column 40)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 53, column 2 to column 42)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 56, column 20 to column 46)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 56, column 3 to column 46)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 57, column 3 to column 33)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 58, column 3 to column 32)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 59, column 3 to column 45)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 37, column 3 to column 18)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 38, column 18 to column 19)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 38, column 3 to column 21)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 39, column 18 to column 19)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 39, column 3 to column 21)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 40, column 3 to column 23)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 41, column 3 to column 20)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 42, column 29 to column 32)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 42, column 3 to column 34)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 45, column 3 to column 26)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 46, column 3 to column 25)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 50, column 35 to column 38)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 7, column 3 to column 51)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 8, column 3 to column 19)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 11, column 9 to column 25)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 12, column 20 to column 38)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 12, column 18 to column 40)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 12, column 9 to column 40)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 13, column 9 to column 100)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 14, column 9 to column 99)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 15, column 9 to column 24)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 15, column 25 to column 38)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 10, column 26 to line 16, column 7)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 10, column 6 to line 16, column 7)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 18, column 9 to column 29)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 19, column 9 to column 39)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 20, column 28 to column 60)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 20, column 26 to column 62)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 20, column 9 to column 62)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 21, column 9 to column 140)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 22, column 9 to column 139)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 23, column 9 to column 24)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 23, column 25 to column 38)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 17, column 26 to line 24, column 7)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 17, column 6 to line 24, column 7)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 9, column 10 to line 25, column 4)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 9, column 3 to line 25, column 4)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 26, column 3 to column 32)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 6, column 78 to line 27, column 1)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 29, column 3 to column 13)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 31, column 36 to column 42)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 31, column 34 to column 44)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 31, column 6 to column 44)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 30, column 17 to line 32, column 4)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 30, column 3 to line 32, column 4)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 33, column 3 to column 14)",
 " (in '/hpc/group/allenlab/scarlett/github/RNAseq-analysis/stan_models/iBEASTIE4.stan', line 28, column 35 to line 34, column 1)"};


template <typename T0__, typename T1__, typename T5__>
stan::promote_args_t<T0__, T1__,
T5__>
forward(const std::vector<T0__>& pi, const T1__& p, const int& M,
        const std::vector<int>& A, const std::vector<int>& R,
        const std::vector<T5__>& missingPi, const int& fix,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T5__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ even;
    even = DUMMY_VAR__;
    
    current_statement__ = 21;
    even = binomial_lpmf<false>(rvalue(A, "A", index_uni(fix)),
             (rvalue(A, "A", index_uni(fix)) +
               rvalue(R, "R", index_uni(fix))), p);
    local_scalar_t__ odd;
    odd = DUMMY_VAR__;
    
    current_statement__ = 22;
    odd = stan::math::log(0);
    current_statement__ = 45;
    if (logical_gt(M, 1)) {
      current_statement__ = 32;
      for (int i = (fix + 1); i <= M; ++i) {
        local_scalar_t__ PI;
        PI = DUMMY_VAR__;
        
        current_statement__ = 23;
        PI = rvalue(pi, "pi", index_uni((i - 1)));
        current_statement__ = 26;
        if (logical_lt(PI, 0)) {
          current_statement__ = 24;
          PI = rvalue(missingPi, "missingPi", index_uni((i - 1)));
        } 
        local_scalar_t__ next_even;
        next_even = DUMMY_VAR__;
        
        current_statement__ = 27;
        next_even = (log_sum_exp((even + stan::math::log((1 - PI))),
                       (odd + stan::math::log(PI))) +
                      binomial_lpmf<false>(rvalue(A, "A", index_uni(i)),
                        (rvalue(A, "A", index_uni(i)) +
                          rvalue(R, "R", index_uni(i))), p));
        local_scalar_t__ next_odd;
        next_odd = DUMMY_VAR__;
        
        current_statement__ = 28;
        next_odd = (log_sum_exp((even + stan::math::log(PI)),
                      (odd + stan::math::log((1 - PI)))) +
                     binomial_lpmf<false>(rvalue(R, "R", index_uni(i)),
                       (rvalue(A, "A", index_uni(i)) +
                         rvalue(R, "R", index_uni(i))), p));
        current_statement__ = 29;
        even = next_even;
        current_statement__ = 30;
        odd = next_odd;
      }
      current_statement__ = 43;
      for (int j = 1; j <= (fix - 1); ++j) {
        int reverse_i;
        reverse_i = std::numeric_limits<int>::min();
        
        current_statement__ = 33;
        reverse_i = (fix - j);
        local_scalar_t__ reverse_PI;
        reverse_PI = DUMMY_VAR__;
        
        current_statement__ = 34;
        reverse_PI = rvalue(pi, "pi", index_uni(reverse_i));
        current_statement__ = 37;
        if (logical_lt(reverse_PI, 0)) {
          current_statement__ = 35;
          reverse_PI = rvalue(missingPi, "missingPi", index_uni(reverse_i));
        } 
        local_scalar_t__ next_even;
        next_even = DUMMY_VAR__;
        
        current_statement__ = 38;
        next_even = (log_sum_exp((even + stan::math::log((1 - reverse_PI))),
                       (odd + stan::math::log(reverse_PI))) +
                      binomial_lpmf<false>(
                        rvalue(A, "A", index_uni(reverse_i)),
                        (rvalue(A, "A", index_uni(reverse_i)) +
                          rvalue(R, "R", index_uni(reverse_i))), p));
        local_scalar_t__ next_odd;
        next_odd = DUMMY_VAR__;
        
        current_statement__ = 39;
        next_odd = (log_sum_exp((even + stan::math::log(reverse_PI)),
                      (odd + stan::math::log((1 - reverse_PI)))) +
                     binomial_lpmf<false>(
                       rvalue(R, "R", index_uni(reverse_i)),
                       (rvalue(A, "A", index_uni(reverse_i)) +
                         rvalue(R, "R", index_uni(reverse_i))), p));
        current_statement__ = 40;
        even = next_even;
        current_statement__ = 41;
        odd = next_odd;
      }
    } 
    current_statement__ = 46;
    return log_sum_exp(even, odd);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct forward_functor__ {
template <typename T0__, typename T1__, typename T5__>
stan::promote_args_t<T0__, T1__,
T5__>
operator()(const std::vector<T0__>& pi, const T1__& p, const int& M,
           const std::vector<int>& A, const std::vector<int>& R,
           const std::vector<T5__>& missingPi, const int& fix,
           std::ostream* pstream__)  const 
{
return forward(pi, p, M, A, R, missingPi, fix, pstream__);
}
};

int
deepest(const int& M, const std::vector<int>& A, const std::vector<int>& R,
        std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int fix;
    fix = std::numeric_limits<int>::min();
    
    current_statement__ = 48;
    fix = 1;
    current_statement__ = 53;
    for (int i = 2; i <= M; ++i) {
      current_statement__ = 51;
      if (logical_gt(
            (rvalue(A, "A", index_uni(i)) + rvalue(R, "R", index_uni(i))),
            (rvalue(A, "A", index_uni(fix)) + rvalue(R, "R", index_uni(fix))))) {
        current_statement__ = 49;
        fix = i;
      } 
    }
    current_statement__ = 54;
    return fix;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct deepest_functor__ {
int
operator()(const int& M, const std::vector<int>& A,
           const std::vector<int>& R, std::ostream* pstream__)  const 
{
return deepest(M, A, R, pstream__);
}
};

class iBEASTIE4_model final : public model_base_crtp<iBEASTIE4_model> {

 private:
  int M;
  std::vector<int> A;
  std::vector<int> R;
  double sigma;
  int N_MISSING_PI;
  std::vector<double> pi;
  int fix;
  int N_PI;
  int missingPi_1dim__; 
  
 
 public:
  ~iBEASTIE4_model() { }
  
  inline std::string model_name() const final { return "iBEASTIE4_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  iBEASTIE4_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "iBEASTIE4_model_namespace::iBEASTIE4_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 9;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 9;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 9;
      check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 10;
      validate_non_negative_index("A", "M", M);
      current_statement__ = 11;
      context__.validate_dims("data initialization","A","int",
           std::vector<size_t>{static_cast<size_t>(M)});
      A = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 11;
      A = context__.vals_i("A");
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 11;
        check_greater_or_equal(function__, "A[sym1__]", A[(sym1__ - 1)], 0);
      }
      current_statement__ = 12;
      validate_non_negative_index("R", "M", M);
      current_statement__ = 13;
      context__.validate_dims("data initialization","R","int",
           std::vector<size_t>{static_cast<size_t>(M)});
      R = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 13;
      R = context__.vals_i("R");
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 13;
        check_greater_or_equal(function__, "R[sym1__]", R[(sym1__ - 1)], 0);
      }
      current_statement__ = 14;
      context__.validate_dims("data initialization","sigma","double",
           std::vector<size_t>{});
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      current_statement__ = 14;
      check_greater_or_equal(function__, "sigma", sigma, 0);
      current_statement__ = 15;
      context__.validate_dims("data initialization","N_MISSING_PI","int",
           std::vector<size_t>{});
      N_MISSING_PI = std::numeric_limits<int>::min();
      
      current_statement__ = 15;
      N_MISSING_PI = context__.vals_i("N_MISSING_PI")[(1 - 1)];
      current_statement__ = 16;
      validate_non_negative_index("pi", "M - 1", (M - 1));
      current_statement__ = 17;
      context__.validate_dims("data initialization","pi","double",
           std::vector<size_t>{static_cast<size_t>((M - 1))});
      pi = std::vector<double>((M - 1), std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 17;
      pi = context__.vals_r("pi");
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= (M - 1); ++sym1__) {
        current_statement__ = 17;
        check_greater_or_equal(function__, "pi[sym1__]", pi[(sym1__ - 1)], -1);
      }
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= (M - 1); ++sym1__) {
        current_statement__ = 17;
        check_less_or_equal(function__, "pi[sym1__]", pi[(sym1__ - 1)], 1);
      }
      current_statement__ = 18;
      fix = std::numeric_limits<int>::min();
      
      current_statement__ = 18;
      fix = deepest(M, A, R, pstream__);
      current_statement__ = 19;
      N_PI = std::numeric_limits<int>::min();
      
      current_statement__ = 19;
      N_PI = (M - 1);
      current_statement__ = 19;
      check_greater_or_equal(function__, "N_PI", N_PI, 0);
      current_statement__ = 20;
      missingPi_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      missingPi_1dim__ = (M - 1);
      current_statement__ = 20;
      validate_non_negative_index("missingPi", "M - 1", missingPi_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + missingPi_1dim__;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "iBEASTIE4_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ theta;
      theta = DUMMY_VAR__;
      
      current_statement__ = 1;
      theta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      std::vector<local_scalar_t__> missingPi;
      missingPi = std::vector<local_scalar_t__>(missingPi_1dim__, DUMMY_VAR__);
      
      
      current_statement__ = 2;
      missingPi = in__.template read_constrain_lub<std::vector<local_scalar_t__>, jacobian__>(
                    0, 1, lp__, missingPi_1dim__);
      local_scalar_t__ p;
      p = DUMMY_VAR__;
      
      current_statement__ = 3;
      p = (theta / (1 + theta));
      current_statement__ = 3;
      check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 3;
      check_less_or_equal(function__, "p", p, 1);
      {
        current_statement__ = 5;
        for (int i = 1; i <= N_PI; ++i) {
          current_statement__ = 4;
          lp_accum__.add(
            beta_lpdf<propto__>(rvalue(missingPi, "missingPi", index_uni(i)),
              1, 10));
        }
        current_statement__ = 6;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::log2(theta), 0, sigma));
        current_statement__ = 7;
        lp_accum__.add(-stan::math::log((theta * stan::math::log(2))));
        current_statement__ = 8;
        lp_accum__.add(forward(pi, p, M, A, R, missingPi, fix, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "iBEASTIE4_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      theta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      std::vector<double> missingPi;
      missingPi = std::vector<double>(missingPi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 2;
      missingPi = in__.template read_constrain_lub<std::vector<local_scalar_t__>, jacobian__>(
                    0, 1, lp__, missingPi_1dim__);
      double p;
      p = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(theta);
      for (int sym1__ = 1; sym1__ <= missingPi_1dim__; ++sym1__) {
        vars__.emplace_back(missingPi[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 3;
      p = (theta / (1 + theta));
      current_statement__ = 3;
      check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 3;
      check_less_or_equal(function__, "p", p, 1);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(p);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      theta = context__.vals_r("theta")[(1 - 1)];
      double theta_free__;
      theta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      theta_free__ = stan::math::lb_free(theta, 0);
      std::vector<double> missingPi;
      missingPi = std::vector<double>(missingPi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 2;
      missingPi = context__.vals_r("missingPi");
      std::vector<double> missingPi_free__;
      missingPi_free__ = std::vector<double>(missingPi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= missingPi_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(missingPi_free__,
          stan::math::lub_free(missingPi[(sym1__ - 1)], 0, 1),
          "assigning variable missingPi_free__", index_uni(sym1__));
      }
      vars__.emplace_back(theta_free__);
      for (int sym1__ = 1; sym1__ <= missingPi_1dim__; ++sym1__) {
        vars__.emplace_back(missingPi_free__[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"theta", "missingPi", "p"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(missingPi_1dim__)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "theta");
    for (int sym1__ = 1; sym1__ <= missingPi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "missingPi" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "p");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "theta");
    for (int sym1__ = 1; sym1__ <= missingPi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "missingPi" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "p");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"missingPi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(missingPi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"missingPi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(missingPi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = iBEASTIE4_model_namespace::iBEASTIE4_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return iBEASTIE4_model_namespace::profiles__;
}

#endif


